//Tables.jsx 
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Chart } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js';
import 'chart.js/auto';
import { 
  FaUsers, FaClipboardList, FaTasks, FaChartLine, 
  FaSearch, FaBell, FaUserCircle, FaCog, FaSignOutAlt,
  FaHome, FaCalendarAlt, FaChartBar, FaChevronLeft, FaChevronRight,
  FaChartPie, FaTimes, FaProjectDiagram
} from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';
import { useParams } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from "react-router-dom";

// Enregistrement des composants Chart.js nécessaires
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

const ResTest = () => {
  // États
  const [activeTab, setActiveTab] = useState('dashboard');
  const [users, setUsers] = useState([]);
   const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState('');
  const [notifications, setNotifications] = useState([]);
  const [selectedRessources, setSelectedRessources] = useState({});
  const { resourceId } = useParams();
  const { user } = useAuth();
  const [resourceData, setResourceData] = useState(null);
  const [demandes, setDemandes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [occupationData, setOccupationData] = useState(null);
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const fetchResourceData = async () => {
      try {
        // Vérifier que l'utilisateur accède à son propre dashboard
        if (user.username !== (resourceId)) {
          throw new Error('Accès non autorisé');
        }

        const [resourceResponse, demandesResponse,occupationRes] = await Promise.all([
          axios.get(`http://localhost:8089/auth/id/${resourceId}`),
          axios.get(`http://localhost:8084/api/demandes/affectees?ressourceId=${resourceId}`),
          axios.get(`http://localhost:8084/api/demandes/${resourceId}/occupation`)
      
          
        ]);

        setResourceData(resourceResponse.data);
        setDemandes(demandesResponse.data);
        setOccupationData(occupationRes.data);

        // Transformation des demandes en événements pour le calendrier
        const calendarEvents = demandesResponse.data.map(demande => ({
          id: demande.id_Demande,
          title: demande.nomProjet,
          start: new Date(demande.dateDebutPlanifiee),
          end: new Date(demande.dateFinPlanifiee),
          resource: demande,
          color: getStatusColor(demande.statut)
        }));

        setEvents(calendarEvents);
      } catch (error) {
        console.error('Erreur lors du chargement des données:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchResourceData();
    
  }, [resourceId, user]);
   if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-12 h-12 border-4 border-orange-500 border-t-transparent rounded-full"
        />
      </div>
    );
  }

  if (!resourceData) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Ressource non trouvée</h2>
          <p className="text-gray-600">Veuillez vérifier l'URL ou contacter l'administrateur.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <motion.div 
        initial={{ x: -250 }}
        animate={{ x: 0 }}
        className={`${isSidebarCollapsed ? 'w-20' : 'w-64'} bg-white shadow-lg transition-all duration-300 ease-in-out`}
      >
        <div className="p-6">
          <div className="flex items-center justify-between mb-8">
            {!isSidebarCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="h-10 w-10 rounded-lg bg-gradient-to-r from-orange-500 to-orange-600 flex items-center justify-center">
                  <FaChartLine className="text-white text-xl" />
                </div>
                <h2 className="text-xl font-bold bg-gradient-to-r from-orange-500 to-orange-600 bg-clip-text text-transparent">
                  Dashboard
                </h2>
              </div>
            )}
            <button
              onClick={() => setIsSidebarCollapsed(!isSidebarCollapsed)}
              className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
            >
              {isSidebarCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
          <nav className="space-y-2">
            <SidebarItem
              icon={<FaHome />}
              text="Dashboard"
              active={activeTab === 'dashboard'}
              onClick={() => setActiveTab('dashboard')}
              collapsed={isSidebarCollapsed}
            />
            <SidebarItem
              icon={<FaClipboardList />}
              text="Demandes"
              active={activeTab === 'demandes'}
              onClick={() => setActiveTab('demandes')}
              collapsed={isSidebarCollapsed}
            />
            <SidebarItem
              icon={<FaCalendarAlt />}
              text="Calendrier"
              active={activeTab === 'calendar'}
              onClick={() => setActiveTab('calendar')}
              collapsed={isSidebarCollapsed}
            />
            <SidebarItem
              icon={<FaChartBar />}
              text="Statistiques"
              active={activeTab === 'stats'}
              onClick={() => setActiveTab('stats')}
              collapsed={isSidebarCollapsed}
            />
          </nav>
        </div>
      </motion.div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200">
          <div className="flex items-center justify-between px-6 py-4">
            <div className="flex items-center space-x-4">
              <motion.h1 
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-2xl font-bold text-gray-800"
              >
                {activeTab === 'dashboard' && 'Tableau de bord'}
                {activeTab === 'demandes' && 'Gestion des Demandes'}
                {activeTab === 'calendar' && 'Calendrier'}
                {activeTab === 'stats' && 'Statistiques'}
              </motion.h1>
            </div>
            <div className="flex items-center space-x-4">
              <SearchBar value={searchTerm} onChange={setSearchTerm} />
              <NotificationBell notifications={notifications} />
              <UserMenu user={resourceData} />
            </div>
          </div>
        </header>

        {/* Main Content Area */}
        <main className="p-6 overflow-auto h-[calc(100vh-4rem)]">
          <AnimatePresence mode="wait">
            {activeTab === 'dashboard' && (
              <motion.div
                key="dashboard"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
              >
                <DashboardView 
                  resourceData={resourceData}
                  occupationData={occupationData}
                  demandes={demandes}
                />
              </motion.div>
            )}
            {activeTab === 'demandes' && (
              <motion.div
                key="demandes"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
              >
                <DemandesView 
                  demandes={demandes}
                  navigate={navigate}
                />
              </motion.div>
            )}
            {activeTab === 'calendar' && (
              <motion.div
                key="calendar"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
              >
                <CalendarView events={events} />
              </motion.div>
            )}
          </AnimatePresence>
        </main>
      </div>
    </div>
  );
};

// Composants auxiliaires
const SidebarItem = ({ icon, text, active, onClick, collapsed }) => (
  <motion.button
    whileHover={{ scale: 1.02 }}
    whileTap={{ scale: 0.98 }}
    className={`flex items-center space-x-3 w-full px-4 py-3 rounded-lg transition-all duration-200 ${
      active 
        ? 'bg-gradient-to-r from-orange-500 to-orange-600 text-white shadow-lg' 
        : 'text-gray-600 hover:bg-orange-50 hover:text-orange-500'
    }`}
    onClick={onClick}
  >
    <span className={`text-xl transition-colors duration-200 ${active ? 'text-white' : 'text-orange-500'}`}>
      {icon}
    </span>
    {!collapsed && <span className="font-medium">{text}</span>}
  </motion.button>
);

const SearchBar = ({ value, onChange }) => (
  <div className="relative">
    <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
    <input
      type="text"
      placeholder="Rechercher..."
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="pl-10 pr-4 py-2 w-64 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-200"
    />
  </div>
);

const NotificationBell = ({ notifications }) => (
  <div className="relative">
    <motion.button
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.9 }}
      className="relative p-2 text-gray-600 hover:text-orange-500 transition-colors duration-200"
    >
      <FaBell className="text-xl" />
      {notifications.length > 0 && (
        <motion.span
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
        >
          {notifications.length}
        </motion.span>
      )}
    </motion.button>
  </div>
);

const UserMenu = ({ user }) => (
  <div className="relative group">
    <button className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
      <div className="w-10 h-10 rounded-full bg-gradient-to-r from-orange-500 to-orange-600 flex items-center justify-center shadow-lg">
        {user.avatar ? (
          <img src={user.avatar} alt={user.username} className="w-full h-full rounded-full object-cover" />
        ) : (
          <FaUserCircle className="text-white text-xl" />
        )}
      </div>
      <div className="hidden md:block text-left">
        <p className="font-medium text-gray-800">{user.username}</p>
        <p className="text-xs text-gray-500">{user.role}</p>
      </div>
    </button>
  </div>
);

const DashboardView = ({ resourceData, demandes, occupationData }) => {
  // Calcul des statistiques
  const stats = {
    totalDemandes: demandes.length,
    demandesEnCours: demandes.filter(d => d.statut === 'EN_COURS').length,
    demandesTerminees: demandes.filter(d => d.statut === 'TERMINEE').length,
    tauxOccupation: occupationData?.tauxOccupation || 0
  };

  // Configuration des graphiques
  const occupationChartData = {
    labels: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'],
    datasets: [
      {
        label: 'Occupation (%)',
        data: occupationData?.occupationParJour || Array(7).fill(0),
        fill: true,
        backgroundColor: 'rgba(249, 115, 22, 0.1)',
        borderColor: 'rgb(249, 115, 22)',
        tension: 0.4
      }
    ]
  };

  const statusChartData = {
    labels: ['Terminé', 'En cours', 'En attente'],
    datasets: [
      {
        data: [
          stats.demandesTerminees,
          stats.demandesEnCours,
          demandes.filter(d => d.statut === 'EN_ATTENTE').length
        ],
        backgroundColor: [
          'rgba(34, 197, 94, 0.8)',
          'rgba(59, 130, 246, 0.8)',
          'rgba(234, 179, 8, 0.8)'
        ],
        borderWidth: 0
      }
    ]
  };

  return (
    <div className="space-y-6">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-xl shadow-lg p-6 mb-6"
        >
          <div className="flex items-center space-x-4">
            <div className="h-16 w-16 rounded-full bg-gradient-to-r from-orange-500 to-orange-600 flex items-center justify-center shadow-lg">
              <FaUserCircle className="text-white text-3xl" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-800">
                Bienvenue, {resourceData.username}
              </h1>
              <p className="text-gray-600">{resourceData.role}</p>
            </div>
          </div>
        </motion.div>

        {/* Statistiques */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          <StatCard
            title="Total Demandes"
            value={stats.totalDemandes}
            icon={<FaClipboardList />}
            color="orange"
          />
          <StatCard
            title="En Cours"
            value={stats.demandesEnCours}
            icon={<FaTasks />}
            color="blue"
          />
          <StatCard
            title="Terminées"
            value={stats.demandesTerminees}
            icon={<FaChartLine />}
            color="green"
          />
          <StatCard
            title="Taux d'occupation"
            value={`${stats.tauxOccupation}%`}
            icon={<FaChartPie />}
            color={stats.tauxOccupation >= 100 ? "red" : "purple"}
          />
        </div>

        {/* Titre de la section des graphiques */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-800 flex items-center">
            <div className="h-8 w-1 bg-orange-500 rounded-full mr-3"></div>
            Visualisation des données
          </h2>
          <p className="text-gray-600 mt-2">Analyse détaillée de votre activité et de vos performances</p>
        </div>

        {/* Graphiques */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-6 flex items-center">
              <FaChartLine className="mr-2 text-orange-500" />
              Occupation hebdomadaire
            </h2>
            <div className="h-80">
              <Chart type="line" data={occupationChartData} options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    display: false
                  }
                },
                scales: {
                  y: {
                    beginAtZero: true,
                    max: 100,
                    ticks: {
                      callback: value => `${value}%`
                    }
                  }
                }
              }} />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-6 flex items-center">
              <FaChartPie className="mr-2 text-orange-500" />
              Répartition des statuts
            </h2>
            <div className="h-80">
              <Chart type="doughnut" data={statusChartData} options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    position: 'bottom'
                  }
                }
              }} />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const StatCard = ({ title, value, icon, color, subtitle }) => {
  const colorClasses = {
    orange: "from-orange-500 to-orange-600",
    green: "from-green-500 to-green-600",
    yellow: "from-yellow-500 to-yellow-600",
    red: "from-red-500 to-red-600",
    blue: "from-blue-500 to-blue-600"
  };

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      className="bg-white rounded-xl shadow-lg p-6 relative overflow-hidden"
    >
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-500">{title}</p>
          <p className="text-2xl font-bold text-gray-800 mt-1">{value}</p>
          {subtitle && (
            <p className={`text-sm mt-1 ${
              color === "red" ? "text-red-600" : "text-gray-600"
            }`}>
              {subtitle}
            </p>
          )}
        </div>
        <div className={`h-12 w-12 rounded-lg bg-gradient-to-r ${colorClasses[color]} flex items-center justify-center shadow-lg`}>
          <span className="text-white text-xl">{icon}</span>
        </div>
      </div>
      <div className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${colorClasses[color]}`} />
    </motion.div>
  );
};

const DemandesView = ({ demandes, navigate }) => (
  <div className="bg-white rounded-xl shadow-lg p-6">
    <div className="flex items-center justify-between mb-6">
      <h2 className="text-2xl font-bold text-gray-800">Mes demandes</h2>
      <div className="flex items-center space-x-2">
        <span className="text-sm text-gray-500">Total: {demandes.length}</span>
        <div className="h-4 w-px bg-gray-200"></div>
        <span className="text-sm text-gray-500">
          En cours: {demandes.filter(d => d.statut === 'EN_COURS').length}
        </span>
      </div>
    </div>
    <div className="space-y-4">
      {demandes.map((demande) => (
        <motion.div
          key={demande.id_Demande}
          whileHover={{ scale: 1.01, y: -2 }}
          className="group relative bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg transition-all duration-200 cursor-pointer overflow-hidden"
          onClick={() => navigate(`/demande/${demande.id_Demande}`)}
        >
          {/* Barre de progression */}
          <div className="absolute top-0 left-0 right-0 h-1 bg-gray-100">
            <motion.div
              initial={{ width: 0 }}
              animate={{ width: "100%" }}
              transition={{ duration: 1, ease: "easeInOut" }}
              className={`h-full ${
                demande.statut === 'TERMINEE' ? 'bg-green-500' :
                demande.statut === 'EN_COURS' ? 'bg-blue-500' :
                'bg-orange-500'
              }`}
            />
          </div>

          <div className="flex justify-between items-start">
            <div className="space-y-3">
              <div className="flex items-center space-x-3">
                <h3 className="text-xl font-bold text-gray-800 group-hover:text-orange-500 transition-colors">
                  {demande.nomProjet}
                </h3>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  demande.priorite === 'HAUTE' ? 'bg-red-100 text-red-800' :
                  demande.priorite === 'MOYENNE' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-green-100 text-green-800'
                }`}>
                  {demande.priorite}
                </span>
              </div>
              <p className="text-gray-600 line-clamp-2">{demande.description}</p>
              <div className="flex items-center space-x-4 text-sm text-gray-500">
                <div className="flex items-center">
                  <FaCalendarAlt className="mr-2 text-orange-500" />
                  <span>{new Date(demande.dateDebutPlanifiee).toLocaleDateString()}</span>
                </div>
                <div className="flex items-center">
                  <FaChartBar className="mr-2 text-orange-500" />
                  <span>Charge: {demande.chargePlanifiee}</span>
                </div>
              </div>
            </div>
            <div className="flex flex-col items-end space-y-3">
              <span className={`px-4 py-2 rounded-full text-sm font-medium ${
                demande.statut === 'TERMINEE' ? 'bg-green-100 text-green-800' :
                demande.statut === 'EN_COURS' ? 'bg-blue-100 text-blue-800' :
                'bg-yellow-100 text-yellow-800'
              }`}>
                {demande.statut}
              </span>
              <div className="flex items-center space-x-2 text-gray-400 group-hover:text-orange-500 transition-colors">
                <span className="text-sm">Voir détails</span>
                <FaChevronRight className="text-sm transform group-hover:translate-x-1 transition-transform" />
              </div>
            </div>
          </div>
        </motion.div>
      ))}
    </div>
  </div>
);

const CalendarView = ({ events }) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [view, setView] = useState('month'); // 'month', 'week', 'day'

  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    return new Date(year, month + 1, 0).getDate();
  };

  const getFirstDayOfMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    return new Date(year, month, 1).getDay();
  };

  const getMonthName = (date) => {
    return date.toLocaleString('fr-FR', { month: 'long', year: 'numeric' });
  };

  const getWeekDays = () => {
    return ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'];
  };

  const getEventsForDate = (date) => {
    return events.filter(event => {
      const eventStart = new Date(event.start);
      const eventEnd = new Date(event.end);
      return date >= eventStart && date <= eventEnd;
    });
  };

  const renderMonthView = () => {
    const daysInMonth = getDaysInMonth(currentDate);
    const firstDay = getFirstDayOfMonth(currentDate);
    const days = [];
    const weekDays = getWeekDays();

    // Ajouter les jours du mois précédent
    for (let i = 0; i < firstDay; i++) {
      days.push(<div key={`empty-${i}`} className="h-32 bg-gray-50"></div>);
    }

    // Ajouter les jours du mois
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
      const dayEvents = getEventsForDate(date);
      
      days.push(
        <div key={day} className="h-32 p-2 border border-gray-200 relative">
          <span className={`text-sm font-medium ${day === new Date().getDate() && currentDate.getMonth() === new Date().getMonth() ? 'text-orange-500' : 'text-gray-600'}`}>
            {day}
          </span>
          <div className="mt-1 space-y-1">
            {dayEvents.map(event => (
              <div
                key={event.id}
                className="text-xs p-1 rounded truncate cursor-pointer hover:opacity-80"
                style={{ backgroundColor: event.color }}
                onClick={() => setSelectedEvent(event)}
              >
                {event.title}
              </div>
            ))}
          </div>
        </div>
      );
    }

    return (
      <div className="grid grid-cols-7 gap-px bg-gray-200">
        {weekDays.map(day => (
          <div key={day} className="bg-gray-50 p-2 text-center font-medium text-gray-600">
            {day}
          </div>
        ))}
        {days}
      </div>
    );
  };

  const renderWeekView = () => {
    const weekDays = getWeekDays();
    const today = new Date();
    const startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() - today.getDay());

    return (
      <div className="grid grid-cols-7 gap-px bg-gray-200">
        {weekDays.map((day, index) => {
          const date = new Date(startOfWeek);
          date.setDate(startOfWeek.getDate() + index);
          const dayEvents = getEventsForDate(date);

          return (
            <div key={day} className="bg-white min-h-[600px] p-2">
              <div className="text-center font-medium text-gray-600 mb-2">
                {day}
                <br />
                <span className={`text-sm ${date.getDate() === today.getDate() ? 'text-orange-500' : 'text-gray-500'}`}>
                  {date.getDate()}
                </span>
              </div>
              <div className="space-y-1">
                {dayEvents.map(event => (
                  <div
                    key={event.id}
                    className="text-xs p-1 rounded truncate cursor-pointer hover:opacity-80"
                    style={{ backgroundColor: event.color }}
                    onClick={() => setSelectedEvent(event)}
                  >
                    {event.title}
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const renderDayView = () => {
    const today = new Date();
    const dayEvents = getEventsForDate(today);

    return (
      <div className="bg-white p-4">
        <div className="text-center font-medium text-gray-600 mb-4">
          {today.toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', month: 'long' })}
        </div>
        <div className="space-y-2">
          {dayEvents.map(event => (
            <div
              key={event.id}
              className="p-3 rounded-lg cursor-pointer hover:opacity-80"
              style={{ backgroundColor: event.color }}
              onClick={() => setSelectedEvent(event)}
            >
              <div className="font-medium text-white">{event.title}</div>
              <div className="text-sm text-white opacity-90">
                {new Date(event.start).toLocaleTimeString()} - {new Date(event.end).toLocaleTimeString()}
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-gray-800 flex items-center">
            <div className="h-8 w-1 bg-orange-500 rounded-full mr-3"></div>
            Calendrier des demandes
          </h2>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 rounded-full bg-green-500"></div>
              <span className="text-sm text-gray-600">Terminée</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 rounded-full bg-blue-500"></div>
              <span className="text-sm text-gray-600">En cours</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
              <span className="text-sm text-gray-600">En attente</span>
            </div>
          </div>
        </div>

        <div className="mb-4 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => {
                const newDate = new Date(currentDate);
                newDate.setMonth(newDate.getMonth() - 1);
                setCurrentDate(newDate);
              }}
              className="p-2 rounded-lg hover:bg-gray-100"
            >
              <FaChevronLeft />
            </button>
            <h3 className="text-lg font-medium">{getMonthName(currentDate)}</h3>
            <button
              onClick={() => {
                const newDate = new Date(currentDate);
                newDate.setMonth(newDate.getMonth() + 1);
                setCurrentDate(newDate);
              }}
              className="p-2 rounded-lg hover:bg-gray-100"
            >
              <FaChevronRight />
            </button>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => setView('month')}
              className={`px-4 py-2 rounded-lg ${
                view === 'month' ? 'bg-orange-500 text-white' : 'bg-gray-100 text-gray-600'
              }`}
            >
              Mois
            </button>
            <button
              onClick={() => setView('week')}
              className={`px-4 py-2 rounded-lg ${
                view === 'week' ? 'bg-orange-500 text-white' : 'bg-gray-100 text-gray-600'
              }`}
            >
              Semaine
            </button>
            <button
              onClick={() => setView('day')}
              className={`px-4 py-2 rounded-lg ${
                view === 'day' ? 'bg-orange-500 text-white' : 'bg-gray-100 text-gray-600'
              }`}
            >
              Jour
            </button>
          </div>
        </div>

        <div className="border rounded-lg overflow-hidden">
          {view === 'month' && renderMonthView()}
          {view === 'week' && renderWeekView()}
          {view === 'day' && renderDayView()}
        </div>
      </div>

      {/* Modal pour les détails de l'événement */}
      <AnimatePresence>
        {selectedEvent && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            onClick={() => setSelectedEvent(null)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-xl shadow-lg p-6 max-w-lg w-full mx-4"
              onClick={e => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-gray-800">{selectedEvent.title}</h3>
                <button
                  onClick={() => setSelectedEvent(null)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <FaTimes />
                </button>
              </div>
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <FaCalendarAlt className="text-orange-500" />
                  <span className="text-gray-600">
                    Du {new Date(selectedEvent.start).toLocaleDateString()} au {new Date(selectedEvent.end).toLocaleDateString()}
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <FaChartBar className="text-orange-500" />
                  <span className="text-gray-600">
                    Charge planifiée: {selectedEvent.resource.chargePlanifiee} jours
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <FaProjectDiagram className="text-orange-500" />
                  <span className="text-gray-600">
                    Domaine: {selectedEvent.resource.nomDomaine}
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <FaTasks className="text-orange-500" />
                  <span className="text-gray-600">
                    Statut: {selectedEvent.resource.statut}
                  </span>
                </div>
                <p className="text-gray-600 mt-4">{selectedEvent.resource.description}</p>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

// Fonction pour obtenir la couleur en fonction du statut
const getStatusColor = (statut) => {
  switch (statut) {
    case 'TERMINEE':
      return '#22c55e'; // vert
    case 'EN_COURS':
      return '#3b82f6'; // bleu
    case 'EN_ATTENTE':
      return '#eab308'; // jaune
    default:
      return '#6b7280'; // gris
  }
};

export default ResTest;
