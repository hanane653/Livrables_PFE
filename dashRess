//Tables.jsx 
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Chart } from 'react-chartjs-2';
import 'chart.js/auto';
import { 
  FaUsers, FaClipboardList, FaTasks, FaChartLine, 
  FaSearch, FaBell, FaUserCircle, FaCog, FaSignOutAlt,
  FaHome, FaCalendarAlt, FaChartBar, FaChevronLeft, FaChevronRight
} from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';
import { useParams } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from "react-router-dom";


const ResTest = () => {
  // États
  const [activeTab, setActiveTab] = useState('dashboard');
  const [users, setUsers] = useState([]);
   const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState('');
  const [notifications, setNotifications] = useState([]);
  const [selectedRessources, setSelectedRessources] = useState({});
  const { resourceId } = useParams();
  const { user } = useAuth();
  const [resourceData, setResourceData] = useState(null);
  const [demandes, setDemandes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [occupationData, setOccupationData] = useState(null);
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);


  useEffect(() => {
    const fetchResourceData = async () => {
      try {
        // Vérifier que l'utilisateur accède à son propre dashboard
        if (user.username !== (resourceId)) {
          throw new Error('Accès non autorisé');
        }

        const [resourceResponse, demandesResponse,occupationRes] = await Promise.all([
          axios.get(`http://localhost:8089/auth/id/${resourceId}`),
          axios.get(`http://localhost:8084/api/demandes/affectees?ressourceId=${resourceId}`),
          axios.get(`http://localhost:8084/api/demandes/${resourceId}/occupation`)
      
          
        ]);

        setResourceData(resourceResponse.data);
        setDemandes(demandesResponse.data);
        setOccupationData(occupationRes.data);
      } catch (error) {
        console.error('Erreur lors du chargement des données:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchResourceData();
    
  }, [resourceId, user]);
   if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-12 h-12 border-4 border-orange-500 border-t-transparent rounded-full"
        />
      </div>
    );
  }

  if (!resourceData) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Ressource non trouvée</h2>
          <p className="text-gray-600">Veuillez vérifier l'URL ou contacter l'administrateur.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <motion.div 
        initial={{ x: -250 }}
        animate={{ x: 0 }}
        className={`${isSidebarCollapsed ? 'w-20' : 'w-64'} bg-white shadow-lg transition-all duration-300 ease-in-out`}
      >
        <div className="p-6">
          <div className="flex items-center justify-between mb-8">
            {!isSidebarCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="h-10 w-10 rounded-lg bg-gradient-to-r from-orange-500 to-orange-600 flex items-center justify-center">
                  <FaChartLine className="text-white text-xl" />
                </div>
                <h2 className="text-xl font-bold bg-gradient-to-r from-orange-500 to-orange-600 bg-clip-text text-transparent">
                  Dashboard
                </h2>
              </div>
            )}
            <button
              onClick={() => setIsSidebarCollapsed(!isSidebarCollapsed)}
              className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
            >
              {isSidebarCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
          <nav className="space-y-2">
            <SidebarItem
              icon={<FaHome />}
              text="Dashboard"
              active={activeTab === 'dashboard'}
              onClick={() => setActiveTab('dashboard')}
              collapsed={isSidebarCollapsed}
            />
            <SidebarItem
              icon={<FaClipboardList />}
              text="Demandes"
              active={activeTab === 'demandes'}
              onClick={() => setActiveTab('demandes')}
              collapsed={isSidebarCollapsed}
            />
            <SidebarItem
              icon={<FaCalendarAlt />}
              text="Calendrier"
              active={activeTab === 'calendar'}
              onClick={() => setActiveTab('calendar')}
              collapsed={isSidebarCollapsed}
            />
            <SidebarItem
              icon={<FaChartBar />}
              text="Statistiques"
              active={activeTab === 'stats'}
              onClick={() => setActiveTab('stats')}
              collapsed={isSidebarCollapsed}
            />
          </nav>
        </div>
      </motion.div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200">
          <div className="flex items-center justify-between px-6 py-4">
            <div className="flex items-center space-x-4">
              <motion.h1 
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-2xl font-bold text-gray-800"
              >
                {activeTab === 'dashboard' && 'Tableau de bord'}
                {activeTab === 'demandes' && 'Gestion des Demandes'}
                {activeTab === 'calendar' && 'Calendrier'}
                {activeTab === 'stats' && 'Statistiques'}
              </motion.h1>
            </div>
            <div className="flex items-center space-x-4">
              <SearchBar value={searchTerm} onChange={setSearchTerm} />
              <NotificationBell notifications={notifications} />
              <UserMenu user={resourceData} />
            </div>
          </div>
        </header>

        {/* Main Content Area */}
        <main className="p-6 overflow-auto h-[calc(100vh-4rem)]">
          <AnimatePresence mode="wait">
            {activeTab === 'dashboard' && (
              <motion.div
                key="dashboard"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
              >
                <DashboardView 
                  resourceData={resourceData}
                  occupationData={occupationData}
                  demandes={demandes}
                />
              </motion.div>
            )}
            {activeTab === 'demandes' && (
              <motion.div
                key="demandes"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
              >
                <DemandesView 
                  demandes={demandes}
                  navigate={navigate}
                />
              </motion.div>
            )}
          </AnimatePresence>
        </main>
      </div>
    </div>
  );
};

// Composants auxiliaires
const SidebarItem = ({ icon, text, active, onClick, collapsed }) => (
  <motion.button
    whileHover={{ scale: 1.02 }}
    whileTap={{ scale: 0.98 }}
    className={`flex items-center space-x-3 w-full px-4 py-3 rounded-lg transition-all duration-200 ${
      active 
        ? 'bg-gradient-to-r from-orange-500 to-orange-600 text-white shadow-lg' 
        : 'text-gray-600 hover:bg-orange-50 hover:text-orange-500'
    }`}
    onClick={onClick}
  >
    <span className={`text-xl transition-colors duration-200 ${active ? 'text-white' : 'text-orange-500'}`}>
      {icon}
    </span>
    {!collapsed && <span className="font-medium">{text}</span>}
  </motion.button>
);

const SearchBar = ({ value, onChange }) => (
  <div className="relative">
    <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
    <input
      type="text"
      placeholder="Rechercher..."
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="pl-10 pr-4 py-2 w-64 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-200"
    />
  </div>
);

const NotificationBell = ({ notifications }) => (
  <div className="relative">
    <motion.button
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.9 }}
      className="relative p-2 text-gray-600 hover:text-orange-500 transition-colors duration-200"
    >
      <FaBell className="text-xl" />
      {notifications.length > 0 && (
        <motion.span
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
        >
          {notifications.length}
        </motion.span>
      )}
    </motion.button>
  </div>
);

const UserMenu = ({ user }) => (
  <div className="relative group">
    <button className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
      <div className="w-10 h-10 rounded-full bg-gradient-to-r from-orange-500 to-orange-600 flex items-center justify-center shadow-lg">
        {user.avatar ? (
          <img src={user.avatar} alt={user.username} className="w-full h-full rounded-full object-cover" />
        ) : (
          <FaUserCircle className="text-white text-xl" />
        )}
      </div>
      <div className="hidden md:block text-left">
        <p className="font-medium text-gray-800">{user.username}</p>
        <p className="text-xs text-gray-500">{user.role}</p>
      </div>
    </button>
  </div>
);

const DashboardView = ({ resourceData, demandes, occupationData }) => (
  <div className="space-y-6">
    <div className="max-w-7xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-xl shadow-lg p-6 mb-6"
      >
        <div className="flex items-center space-x-4">
          <div className="h-16 w-16 rounded-full bg-gradient-to-r from-orange-500 to-orange-600 flex items-center justify-center shadow-lg">
            <FaUserCircle className="text-white text-3xl" />
          </div>
          <div>
            <h1 className="text-2xl font-bold text-gray-800">
              Bienvenue, {resourceData.username}
            </h1>
            <p className="text-gray-600">{resourceData.role}</p>
          </div>
        </div>
      </motion.div>

      {/* Statistiques */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <StatCard
          title="Demandes en cours"
          value={demandes.filter(d => d.statut === 'EN_COURS').length}
          icon={<FaTasks />}
          color="orange"
        />
        <StatCard
          title="Demandes terminées"
          value={demandes.filter(d => d.statut === 'TERMINEE').length}
          icon={<FaChartLine />}
          color="green"
        />
        <StatCard
          title="Demandes en attente"
          value={demandes.filter(d => d.statut === 'EN_ATTENTE').length}
          icon={<FaClipboardList />}
          color="yellow"
        />
        <StatCard
          title="Taux d'occupation"
          value={occupationData ? `${occupationData.tauxOccupation}%` : "Chargement..."}
          icon={<FaChartBar />}
          color={occupationData && occupationData.tauxOccupation >= 100 ? "red" : "blue"}
          subtitle={occupationData && occupationData.tauxOccupation >= 100 ? "⚠ Ressource saturée" : "Charge équilibrée"}
        />
      </div>
    </div>
  </div>
);

const StatCard = ({ title, value, icon, color, subtitle }) => {
  const colorClasses = {
    orange: "from-orange-500 to-orange-600",
    green: "from-green-500 to-green-600",
    yellow: "from-yellow-500 to-yellow-600",
    red: "from-red-500 to-red-600",
    blue: "from-blue-500 to-blue-600"
  };

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      className="bg-white rounded-xl shadow-lg p-6 relative overflow-hidden"
    >
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-500">{title}</p>
          <p className="text-2xl font-bold text-gray-800 mt-1">{value}</p>
          {subtitle && (
            <p className={`text-sm mt-1 ${
              color === "red" ? "text-red-600" : "text-gray-600"
            }`}>
              {subtitle}
            </p>
          )}
        </div>
        <div className={`h-12 w-12 rounded-lg bg-gradient-to-r ${colorClasses[color]} flex items-center justify-center shadow-lg`}>
          <span className="text-white text-xl">{icon}</span>
        </div>
      </div>
      <div className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${colorClasses[color]}`} />
    </motion.div>
  );
};

const DemandesView = ({ demandes, navigate }) => (
  <div className="bg-white rounded-xl shadow-lg p-6">
    <h2 className="text-xl font-bold mb-6">Mes demandes</h2>
    <div className="space-y-4">
      {demandes.map((demande) => (
        <motion.div
          key={demande.id_Demande}
          whileHover={{ scale: 1.01 }}
          className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-all duration-200 cursor-pointer"
          onClick={() => navigate(`/demande/${demande.id_Demande}`)}
        >
          <div className="flex justify-between items-start">
            <div>
              <h3 className="font-semibold text-gray-800">{demande.nomProjet}</h3>
              <p className="text-sm text-gray-600 mt-1">{demande.description}</p>
            </div>
            <span className={`px-3 py-1 rounded-full text-sm font-medium ${
              demande.statut === 'TERMINEE' ? 'bg-green-100 text-green-800' :
              demande.statut === 'EN_COURS' ? 'bg-blue-100 text-blue-800' :
              'bg-yellow-100 text-yellow-800'
            }`}>
              {demande.statut}
            </span>
          </div>
        </motion.div>
      ))}
    </div>
  </div>
);


export default ResTest;
