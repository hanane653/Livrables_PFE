import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { motion, AnimatePresence } from 'framer-motion';
import { Chart } from 'react-chartjs-2';
import {
  FaArrowLeft,
  FaCalendarAlt,
  FaChartBar,
  FaClock,
  FaExclamationTriangle,
  FaCheckCircle,
  FaUser,
  FaProjectDiagram,
  FaTasks,
  FaChartLine,
  FaChartPie
} from 'react-icons/fa';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

const DemandeDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [demande, setDemande] = useState(null);
  const [loading, setLoading] = useState(true);
  const [occupationData, setOccupationData] = useState(null);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [demandeRes, occupationRes, statsRes] = await Promise.all([
          axios.get(`http://localhost:8084/api/demandes/${id}`),
          axios.get(`http://localhost:8084/api/demandes/${id}/occupation`),
          axios.get(`http://localhost:8084/api/demandes/${id}/stats`)
        ]);

        setDemande(demandeRes.data);
        setOccupationData(occupationRes.data);
        setStats(statsRes.data);
      } catch (error) {
        console.error('Erreur lors du chargement des données:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-12 h-12 border-4 border-orange-500 border-t-transparent rounded-full"
        />
      </div>
    );
  }

  if (!demande) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Demande non trouvée</h2>
          <p className="text-gray-600">Veuillez vérifier l'URL ou contacter l'administrateur.</p>
        </div>
      </div>
    );
  }

  // Configuration des graphiques
  const occupationChartData = {
    labels: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'],
    datasets: [
      {
        label: 'Occupation (%)',
        data: occupationData?.occupationParJour || [],
        fill: true,
        backgroundColor: 'rgba(249, 115, 22, 0.1)',
        borderColor: 'rgb(249, 115, 22)',
        tension: 0.4
      }
    ]
  };

  const statusChartData = {
    labels: ['Terminé', 'En cours', 'En attente'],
    datasets: [
      {
        data: [
          stats?.demandesTerminees || 0,
          stats?.demandesEnCours || 0,
          stats?.demandesEnAttente || 0
        ],
        backgroundColor: [
          'rgba(34, 197, 94, 0.8)',
          'rgba(59, 130, 246, 0.8)',
          'rgba(234, 179, 8, 0.8)'
        ],
        borderWidth: 0
      }
    ]
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* En-tête */}
        <div className="mb-8">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => navigate(-1)}
            className="flex items-center space-x-2 text-gray-600 hover:text-orange-500 transition-colors mb-4"
          >
            <FaArrowLeft />
            <span>Retour</span>
          </motion.button>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex justify-between items-start">
              <div>
                <h1 className="text-3xl font-bold text-gray-800 mb-2">{demande.nomProjet}</h1>
                <p className="text-gray-600">{demande.description}</p>
              </div>
              <div className="flex items-center space-x-4">
                <span className={`px-4 py-2 rounded-full text-sm font-medium ${
                  demande.statut === 'TERMINEE' ? 'bg-green-100 text-green-800' :
                  demande.statut === 'EN_COURS' ? 'bg-blue-100 text-blue-800' :
                  'bg-yellow-100 text-yellow-800'
                }`}>
                  {demande.statut}
                </span>
                <span className={`px-4 py-2 rounded-full text-sm font-medium ${
                  demande.priorite === 'HAUTE' ? 'bg-red-100 text-red-800' :
                  demande.priorite === 'MOYENNE' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-green-100 text-green-800'
                }`}>
                  {demande.priorite}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Statistiques principales */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatCard
            title="Charge totale"
            value={`${demande.chargePlanifiee} jours`}
            icon={<FaChartBar />}
            color="orange"
          />
          <StatCard
            title="Progression"
            value={`${stats?.progression || 0}%`}
            icon={<FaChartLine />}
            color="blue"
          />
          <StatCard
            title="Taux d'occupation"
            value={`${occupationData?.tauxOccupation || 0}%`}
            icon={<FaChartPie />}
            color={occupationData?.tauxOccupation >= 100 ? "red" : "green"}
          />
          <StatCard
            title="Ressources affectées"
            value={stats?.ressourcesAffectees || 0}
            icon={<FaUser />}
            color="purple"
          />
        </div>

        {/* Graphiques */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
              <FaChartLine className="mr-2 text-orange-500" />
              Occupation hebdomadaire
            </h2>
            <div className="h-80">
              <Chart type="line" data={occupationChartData} options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    display: false
                  }
                },
                scales: {
                  y: {
                    beginAtZero: true,
                    max: 100,
                    ticks: {
                      callback: value => `${value}%`
                    }
                  }
                }
              }} />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
              <FaChartPie className="mr-2 text-orange-500" />
              Répartition des statuts
            </h2>
            <div className="h-80">
              <Chart type="doughnut" data={statusChartData} options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    position: 'bottom'
                  }
                }
              }} />
            </div>
          </div>
        </div>

        {/* Détails supplémentaires */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-xl font-bold text-gray-800 mb-6">Détails du projet</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <InfoItem
                icon={<FaCalendarAlt />}
                label="Date de début"
                value={new Date(demande.dateDebutPlanifiee).toLocaleDateString()}
              />
              <InfoItem
                icon={<FaCalendarAlt />}
                label="Date de fin"
                value={new Date(demande.dateFinPlanifiee).toLocaleDateString()}
              />
              <InfoItem
                icon={<FaProjectDiagram />}
                label="Domaine"
                value={demande.nomDomaine}
              />
            </div>
            <div className="space-y-4">
              <InfoItem
                icon={<FaTasks />}
                label="Sujet"
                value={demande.sujetDemande}
              />
              <InfoItem
                icon={<FaChartBar />}
                label="Charge planifiée"
                value={`${demande.chargePlanifiee} jours`}
              />
              <InfoItem
                icon={<FaUser />}
                label="Responsable"
                value={demande.responsable || "Non assigné"}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const StatCard = ({ title, value, icon, color }) => {
  const colorClasses = {
    orange: "from-orange-500 to-orange-600",
    blue: "from-blue-500 to-blue-600",
    green: "from-green-500 to-green-600",
    red: "from-red-500 to-red-600",
    purple: "from-purple-500 to-purple-600"
  };

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      className="bg-white rounded-xl shadow-lg p-6 relative overflow-hidden"
    >
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-500">{title}</p>
          <p className="text-2xl font-bold text-gray-800 mt-1">{value}</p>
        </div>
        <div className={`h-12 w-12 rounded-lg bg-gradient-to-r ${colorClasses[color]} flex items-center justify-center shadow-lg`}>
          <span className="text-white text-xl">{icon}</span>
        </div>
      </div>
      <div className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${colorClasses[color]}`} />
    </motion.div>
  );
};

const InfoItem = ({ icon, label, value }) => (
  <div className="flex items-center space-x-3">
    <div className="h-10 w-10 rounded-lg bg-orange-100 flex items-center justify-center">
      <span className="text-orange-500">{icon}</span>
    </div>
    <div>
      <p className="text-sm text-gray-500">{label}</p>
      <p className="font-medium text-gray-800">{value}</p>
    </div>
  </div>
);

export default DemandeDetails;
